/*
   Leitor RFID
   --------------------------------------------------------------------------------------------------------------------
   Este codigo mostra um sistema completo de controle de acesso à porta
   Use um Master Card que atue como programador, então você pode escolher os portadores de cartão que terão acesso ou não
   */


#include <EEPROM.h>    //Vamos ler e escrever os UIDs do PICC  para  EEPROM
#include <SPI.h>        // Módulo RC522 usa o protocolo SPI
#include <MFRC522.h>  // Biblioteca para dispositivos Mifare RC522


// #include <Servo.h>

/*
Para visualizar o que está acontecendo no hardware, 
precisamos de alguns leds e para controlar a trava da porta.
*/

#define COMMON_ANODE

#ifdef COMMON_ANODE
#define LED_ON LOW
#define LED_OFF HIGH
#else
#define LED_ON HIGH
#define LED_OFF LOW
#endif

#define redLed 7    
#define greenLed 6
#define blueLed 5

#define relay 4     
#define wipeB 3     

bool programMode = false;  //

uint8_t successRead;    

byte storedCard[4];  
byte readCard[4];  
byte masterCard[4];   

// Create MFRC522 instance.
#define SS_PIN 10
#define RST_PIN 9
MFRC522 mfrc522(SS_PIN, RST_PIN);

/Configuração
void startRfid() {
  //Arduino Pin Configuration
  pinMode(redLed, OUTPUT);
  pinMode(greenLed, OUTPUT);
  pinMode(blueLed, OUTPUT);
  pinMode(wipeB, INPUT_PULLUP);  
  pinMode(relay, OUTPUT);

  digitalWrite(relay, HIGH);    
  digitalWrite(redLed, LED_OFF);  
  digitalWrite(greenLed, LED_OFF);  
  digitalWrite(blueLed, LED_OFF); 

  //Configuração do Protocolo
  SPI.begin();           
  mfrc522.PCD_Init();    


  for (uint16_t x = 0; x < EEPROM.length(); x = x + 1) {    
        if (EEPROM.read(x) == 0) {            
     
        }
        else {
          EEPROM.write(x, 0);       
        }
      }

  ShowReaderDetails();  

  
  if (digitalRead(wipeB) == LOW) {  
    digitalWrite(redLed, LED_ON); 
    bool buttonState = monitorWipeButton(10000); 
    
    if (buttonState == true && digitalRead(wipeB) == LOW) {   
    
      for (uint16_t x = 0; x < EEPROM.length(); x = x + 1) {    
        if (EEPROM.read(x) == 0) {              
        
        }
        else {
          EEPROM.write(x, 0);      
        }
      }
      digitalWrite(redLed, LED_OFF);  
      delay(200);
      digitalWrite(redLed, LED_ON);
      delay(200);
      digitalWrite(redLed, LED_OFF);
      delay(200);
      digitalWrite(redLed, LED_ON);
      delay(200);
      digitalWrite(redLed, LED_OFF);
    }
    else {
      digitalWrite(redLed, LED_OFF);
    }
  }
 
  if (EEPROM.read(1) != 143) {
    do {
      successRead = getID();            
      digitalWrite(blueLed, LED_ON);    
      delay(200);
      digitalWrite(blueLed, LED_OFF);
      delay(200);
    }
    while (!successRead);                  
    for ( uint8_t j = 0; j < 4; j++ ) {       
      EEPROM.write( 2 + j, readCard[j] );  
    }
    EEPROM.write(1, 143);                 
  }
  for ( uint8_t i = 0; i < 4; i++ ) {          
    masterCard[i] = EEPROM.read(2 + i);    
  }
  cycleLeds();    
}


//Base principal do loop //

void loopRfid() {
  do {
    successRead = getID();  
  
    if (digitalRead(wipeB) == LOW) { 
     
      digitalWrite(redLed, LED_ON);  
      digitalWrite(greenLed, LED_OFF);  
      digitalWrite(blueLed, LED_OFF); 
 
      bool buttonState = monitorWipeButton(10000); 
      if (buttonState == true && digitalRead(wipeB) == LOW) {   
        EEPROM.write(1, 0);                 
        while (1);
      }
    }
    if (programMode) {
      cycleLeds();             
    }
    else {
      normalModeOn();     
    }
  }
  while (!successRead);   
  if (programMode) {
    if ( isMaster(readCard) ) { /
      programMode = false;
      return;
    }
    else {
      if ( findID(readCard) ) { 
        deleteID(readCard);
      }
      else {                    
        writeID(readCard);
      }
    }
  }
  else {
    if ( isMaster(readCard)) {   
      programMode = true;
      uint8_t count = EEPROM.read(0);   
    }
    else {
      if ( findID(readCard) ) { 
        granted(300);        
      }
      else {      
        denied();
      }
    }
  }
}

//Acesso negado//
void granted ( uint16_t setDelay) {
  digitalWrite(blueLed, LED_OFF);  
  digitalWrite(redLed, LED_OFF);  
  digitalWrite(greenLed, LED_ON);   
  digitalWrite(relay, LOW);     
  delay(setDelay);          
  digitalWrite(relay, HIGH);    
  delay(1000);            
}

void denied() {
  digitalWrite(greenLed, LED_OFF);  
  digitalWrite(blueLed, LED_OFF);   
  digitalWrite(redLed, LED_ON);   
  delay(1000);
}


// Obter o UID  do PICC //
uint8_t getID() {
  // Getting ready for Reading PICCs
  if ( ! mfrc522.PICC_IsNewCardPresent()) {
    return 0;
  }
  if ( ! mfrc522.PICC_ReadCardSerial()) {   
    return 0;
  }
 
  for ( uint8_t i = 0; i < 4; i++) {  //
    readCard[i] = mfrc522.uid.uidByte[i];
  }
  mfrc522.PICC_HaltA(); 
  return 1;
}

void ShowReaderDetails() {
  
  byte v = mfrc522.PCD_ReadRegister(mfrc522.VersionReg);

 
  if ((v == 0x00) || (v == 0xFF)) {
    // Visualize system is halted
    digitalWrite(greenLed, LED_OFF);  
    digitalWrite(blueLed, LED_OFF);   
    digitalWrite(redLed, LED_ON);   
    while (true); // do not go further
  }
}

/Modo de Programação //

void cycleLeds() {
  digitalWrite(redLed, LED_OFF);  
  digitalWrite(greenLed, LED_ON);   
  digitalWrite(blueLed, LED_OFF);   
  delay(200);
  digitalWrite(redLed, LED_OFF);  
  digitalWrite(greenLed, LED_OFF);  
  digitalWrite(blueLed, LED_ON);  
  delay(200);
  digitalWrite(redLed, LED_ON);   
  digitalWrite(greenLed, LED_OFF);  
  digitalWrite(blueLed, LED_OFF);  
  delay(200);
}

/ Modo normal conduzido //

void normalModeOn () {
  digitalWrite(blueLed, LED_ON);  
  digitalWrite(redLed, LED_OFF);  
  digitalWrite(greenLed, LED_OFF); 
  digitalWrite(relay, HIGH);   
}

//Leia um ID da EEPROM //

void readID( uint8_t number ) {
  uint8_t start = (number * 4 ) + 2;    
  for ( uint8_t i = 0; i < 4; i++ ) {     
    storedCard[i] = EEPROM.read(start + i);   
  }
}

//Adicionar ID à EEPROM//

void writeID( byte a[] ) {
  if ( !findID( a ) ) {     
    uint8_t num = EEPROM.read(0);     
    uint8_t start = ( num * 4 ) + 6;  
    num++;               
    EEPROM.write( 0, num );    
    for ( uint8_t j = 0; j < 4; j++ ) {   
      EEPROM.write( start + j, a[j] );  
    }
    successWrite();
  }
  else {
    failedWrite();
  }
}

/Remover ID da EEPROM//

void deleteID( byte a[] ) {
  if ( !findID( a ) ) {     
    failedWrite();     
  }
  else {
    uint8_t num = EEPROM.read(0);   
    uint8_t slot;      
    uint8_t start;      
    uint8_t looping;   
    uint8_t j;
    uint8_t count = EEPROM.read(0); 
    slot = findIDSLOT( a );   
    start = (slot * 4) + 2;
    looping = ((num - slot) * 4);
    num--;      
    EEPROM.write( 0, num );   
    for ( j = 0; j < looping; j++ ) {        
      EEPROM.write( start + j, EEPROM.read(start + 4 + j));   
    }
    for ( uint8_t k = 0; k < 4; k++ ) {        
      EEPROM.write( start + j + k, 0);
    }
    successDelete();
  }
}

// Verificar Bytes  

bool checkTwo ( byte a[], byte b[] ) {   
  for ( uint8_t k = 0; k < 4; k++ ) {   
    if ( a[k] != b[k] ) {    
       return false;
    }
  }
  return true;  
}

/ Encontre o Slot   

uint8_t findIDSLOT( byte find[] ) {
  uint8_t count = EEPROM.read(0);      
  for ( uint8_t i = 1; i <= count; i++ ) {    
    readID(i);                
    if ( checkTwo( find, storedCard ) ) {   
      // is the same as the find[] ID card passed
      return i;         
    }
  }
}

//Encontre o ID da EEPROM  

bool findID( byte find[] ) {
  uint8_t count = EEPROM.read(0);     
  for ( uint8_t i = 1; i < count; i++ ) {   
    readID(i);         
    if ( checkTwo( find, storedCard ) ) {  
      return true;
    }
    else {    
    }
  }
  return false;
}

// Pisca o LED verde 3 vezes para indicar uma gravação bem-sucedida na EEPROM
void successWrite() {
  digitalWrite(blueLed, LED_OFF);   
  digitalWrite(redLed, LED_OFF);  
  digitalWrite(greenLed, LED_OFF);  
  delay(200);
  digitalWrite(greenLed, LED_ON);   
  delay(200);
  digitalWrite(greenLed, LED_OFF);  
  delay(200);
  digitalWrite(greenLed, LED_ON);   
  delay(200);
  digitalWrite(greenLed, LED_OFF);  
  delay(200);
  digitalWrite(greenLed, LED_ON);   
  delay(200);
}


//Pisca o LED vermelho 3 vezes para indicar uma falha na gravação na EEPROM

void failedWrite() {
  digitalWrite(blueLed, LED_OFF);   
  digitalWrite(redLed, LED_OFF);  
  digitalWrite(greenLed, LED_OFF);  
  delay(200);
  digitalWrite(redLed, LED_ON);   
  delay(200);
  digitalWrite(redLed, LED_OFF);  
  delay(200);
  digitalWrite(redLed, LED_ON);   
  delay(200);
  digitalWrite(redLed, LED_OFF);  
  delay(200);
  digitalWrite(redLed, LED_ON);   
  delay(200);
}

/Sucesso Remove UID da EEPROM/
//chicoteia o LED azul 3 vezes para indicar um sucesso excluir para EEPROM

void successDelete() {
  digitalWrite(blueLed, LED_OFF);   
  digitalWrite(redLed, LED_OFF); 
  digitalWrite(greenLed, LED_OFF);  
  delay(200);
  digitalWrite(blueLed, LED_ON);  
  delay(200);
  digitalWrite(blueLed, LED_OFF);   
  delay(200);
  digitalWrite(blueLed, LED_ON); 
  delay(200);
  digitalWrite(blueLed, LED_OFF);  
  delay(200);
  digitalWrite(blueLed, LED_ON);  
  delay(200);
}

/Verifique o cartão de leitura IF é masterCard //
// Verifique se o ID passado é o cartão mestre de programação

bool isMaster( byte test[] ) {
  return checkTwo(test, masterCard);
}

bool monitorWipeButton(uint32_t interval) {
  uint32_t now = (uint32_t)millis();
  while ((uint32_t)millis() - now < interval)  {
    // check on every half a second
    if (((uint32_t)millis() % 500) == 0) {
      if (digitalRead(wipeB) != LOW)
        return false;
    }
  }
  return true;
}
